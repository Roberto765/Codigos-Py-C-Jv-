(defun calcular-puntos (salario cantidad-propiedad cantidad-prestamo)
  (let ((porcentaje (/ salario cantidad-prestamo)))
    (cond ((>= porcentaje 0.5) 5)
          ((>= porcentaje 0.25) 3)
          ((>= porcentaje 0.1) 1)
          (t 0))))

(defun solicitar-prestamo ()
  (format t "Ingrese el nombre del solicitante: ")
  (let ((nombre (read-line)))
    (format t "Ingrese la historia crediticia (b/m): ")
    (let ((historia-crediticia (char-upcase (char (read-line) 0))))
      (format t "Ingrese la cantidad pedida: ")
      (let ((cantidad-prestamo (parse-integer (read-line))))
        (format t "Ingrese el salario anual: ")
        (let ((salario (parse-integer (read-line))))
          (format t "Ingrese el valor de otras propiedades: ")
          (let ((valor-propiedad (parse-integer (read-line))))
            (if (and (char= historia-crediticia #\B)
                     (> (+ (calcular-puntos salario valor-propiedad cantidad-prestamo)
                           (if (>= valor-propiedad (* 2 cantidad-prestamo)) 5
                               (if (= valor-propiedad (* 2 cantidad-prestamo)) 3 0)))
                        6))
                (format t "¡Felicidades, ~a! Su solicitud de préstamo ha sido aprobada.~%" nombre)
                (format t "Lo siento, ~a. Su solicitud de préstamo ha sido rechazada.~%" nombre))))))))

(solicitar-prestamo)
